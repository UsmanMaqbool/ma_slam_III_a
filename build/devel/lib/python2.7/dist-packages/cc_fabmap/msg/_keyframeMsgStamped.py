# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cc_fabmap/keyframeMsgStamped.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class keyframeMsgStamped(genpy.Message):
  _md5sum = "edf8042cd030facf41093096999d0310"
  _type = "cc_fabmap/keyframeMsgStamped"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

int32 id
float64 time
bool isKeyframe

# camToWorld as serialization of sophus sim(3).
# may change with keyframeGraph-updates.
float32[7] camToWorld 


# camera parameter (fx fy cx cy), width, height
# will never change, but required for display.
float32 fx
float32 fy
float32 cx
float32 cy
uint32 height
uint32 width


# data as InputPointDense (float idepth, float idepth_var, uchar color[4]), width x height
# may be empty, in that case no associated pointcloud is ever shown.
uint8[] pointcloud

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','id','time','isKeyframe','camToWorld','fx','fy','cx','cy','height','width','pointcloud']
  _slot_types = ['std_msgs/Header','int32','float64','bool','float32[7]','float32','float32','float32','float32','uint32','uint32','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,time,isKeyframe,camToWorld,fx,fy,cx,cy,height,width,pointcloud

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(keyframeMsgStamped, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.time is None:
        self.time = 0.
      if self.isKeyframe is None:
        self.isKeyframe = False
      if self.camToWorld is None:
        self.camToWorld = [0.,0.,0.,0.,0.,0.,0.]
      if self.fx is None:
        self.fx = 0.
      if self.fy is None:
        self.fy = 0.
      if self.cx is None:
        self.cx = 0.
      if self.cy is None:
        self.cy = 0.
      if self.height is None:
        self.height = 0
      if self.width is None:
        self.width = 0
      if self.pointcloud is None:
        self.pointcloud = ''
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.time = 0.
      self.isKeyframe = False
      self.camToWorld = [0.,0.,0.,0.,0.,0.,0.]
      self.fx = 0.
      self.fy = 0.
      self.cx = 0.
      self.cy = 0.
      self.height = 0
      self.width = 0
      self.pointcloud = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_idB.pack(_x.id, _x.time, _x.isKeyframe))
      buff.write(_struct_7f.pack(*self.camToWorld))
      _x = self
      buff.write(_struct_4f2I.pack(_x.fx, _x.fy, _x.cx, _x.cy, _x.height, _x.width))
      _x = self.pointcloud
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.id, _x.time, _x.isKeyframe,) = _struct_idB.unpack(str[start:end])
      self.isKeyframe = bool(self.isKeyframe)
      start = end
      end += 28
      self.camToWorld = _struct_7f.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.fx, _x.fy, _x.cx, _x.cy, _x.height, _x.width,) = _struct_4f2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.pointcloud = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_idB.pack(_x.id, _x.time, _x.isKeyframe))
      buff.write(self.camToWorld.tostring())
      _x = self
      buff.write(_struct_4f2I.pack(_x.fx, _x.fy, _x.cx, _x.cy, _x.height, _x.width))
      _x = self.pointcloud
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.id, _x.time, _x.isKeyframe,) = _struct_idB.unpack(str[start:end])
      self.isKeyframe = bool(self.isKeyframe)
      start = end
      end += 28
      self.camToWorld = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=7)
      _x = self
      start = end
      end += 24
      (_x.fx, _x.fy, _x.cx, _x.cy, _x.height, _x.width,) = _struct_4f2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.pointcloud = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7f = struct.Struct("<7f")
_struct_3I = struct.Struct("<3I")
_struct_idB = struct.Struct("<idB")
_struct_4f2I = struct.Struct("<4f2I")
